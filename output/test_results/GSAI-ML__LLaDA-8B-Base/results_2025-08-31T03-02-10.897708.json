{
  "results": {
    "mbpp": {
      "alias": "mbpp",
      "pass@1,none": 0.392,
      "pass@1_stderr,none": 0.02185468495561125
    },
    "mbpp_plus": {
      "alias": "mbpp_plus",
      "pass@1,none": 0.544973544973545,
      "pass@1_stderr,none": 0.02564692836104939
    }
  },
  "group_subtasks": {
    "mbpp": [],
    "mbpp_plus": []
  },
  "configs": {
    "mbpp": {
      "task": "mbpp",
      "dataset_path": "google-research-datasets/mbpp",
      "dataset_name": "full",
      "test_split": "test",
      "doc_to_text": "You are an expert Python programmer, and here is your task: {{text}} Your code should pass these tests:\n\n{{test_list[0]}}\n{{test_list[1]}}\n{{test_list[2]}}\n[BEGIN]\n",
      "doc_to_target": "{% if is_fewshot is defined %}{{code}}\n[DONE]{% else %}{{test_list[0]}}\n{{test_list[1]}}\n{{test_list[2]}}{% endif %}",
      "unsafe_code": true,
      "description": "",
      "target_delimiter": "",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n",
        "samples": "<function list_fewshot_samples at 0x7f1dd0244a60>"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "def pass_at_k(references: list[str], predictions: list[list[str]], k: list[int] = None):\n    # import pdb; pdb.set_trace() \n    # print(references)\n    # print(predictions)\n    # input(\" \")\n    global compute_\n    assert k is not None\n    if isinstance(k, int):\n        k = [k]\n    if isinstance(references, str):\n        references = [references]\n    if isinstance(predictions[0], str):\n        predictions = [[p] for p in predictions]\n    res = compute_.compute(\n        references=references,\n        predictions=predictions,\n        k=k,\n    )\n    return res[0]\n",
          "k": [
            1,
            10
          ],
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "[DONE]"
        ],
        "num_return_sequences": 1
      },
      "repeats": 10,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0,
        "model_path": "GSAI-ML/LLaDA-8B-Base",
        "gen_length": 128,
        "steps": 128,
        "block_length": 128
      }
    },
    "mbpp_plus": {
      "task": "mbpp_plus",
      "dataset_path": "evalplus/mbppplus",
      "test_split": "test",
      "doc_to_text": "You are an expert Python programmer, and here is your task: {{prompt if prompt is defined else text}} Your code should pass these tests:\n\n{{test_list[0]}}\n{{test_list[1]}}\n{{test_list[2]}}\n[BEGIN]\n",
      "doc_to_target": "{% if is_fewshot is defined %}{{code}}\n[DONE]{% else %}{{test_list[0]}}\n{{test_list[1]}}\n{{test_list[2]}}{% endif %}",
      "unsafe_code": true,
      "description": "",
      "target_delimiter": "",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n",
        "samples": "<function list_fewshot_samples at 0x7f1db42960d0>"
      },
      "num_fewshot": 3,
      "metric_list": [
        {
          "metric": "def pass_at_k(references: list[str], predictions: list[list[str]], k: list[int] = None):\n    # import pdb; pdb.set_trace() \n    # print(references)\n    # print(predictions)\n    # input(\" \")\n    global compute_\n    assert k is not None\n    if isinstance(k, int):\n        k = [k]\n    if isinstance(references, str):\n        references = [references]\n    if isinstance(predictions[0], str):\n        predictions = [[p] for p in predictions]\n    res = compute_.compute(\n        references=references,\n        predictions=predictions,\n        k=k,\n    )\n    return res[0]\n",
          "k": [
            1,
            10
          ],
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "[DONE]"
        ],
        "num_return_sequences": 1
      },
      "repeats": 10,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0,
        "model_path": "GSAI-ML/LLaDA-8B-Base",
        "gen_length": 128,
        "steps": 128,
        "block_length": 128
      }
    }
  },
  "versions": {
    "mbpp": 1.0,
    "mbpp_plus": 1.0
  },
  "n-shot": {
    "mbpp": 3,
    "mbpp_plus": 3
  },
  "higher_is_better": {
    "mbpp": {
      "pass_at_k": true
    },
    "mbpp_plus": {
      "pass_at_k": true
    }
  },
  "n-samples": {
    "mbpp_plus": {
      "original": 378,
      "effective": 378
    },
    "mbpp": {
      "original": 500,
      "effective": 500
    }
  },
  "config": {
    "model": "llada_dist",
    "model_args": "model_path=GSAI-ML/LLaDA-8B-Base,gen_length=128,steps=128,block_length=128",
    "batch_size": 1,
    "batch_sizes": [],
    "device": null,
    "use_cache": null,
    "limit": null,
    "bootstrap_iters": 100000,
    "gen_kwargs": null,
    "random_seed": 0,
    "numpy_seed": 1234,
    "torch_seed": 1234,
    "fewshot_seed": 1234
  },
  "git_hash": "167a79d",
  "date": 1756548417.995321,
  "pretty_env_info": "PyTorch version: 2.8.0+cu128\nIs debug build: False\nCUDA used to build PyTorch: 12.8\nROCM used to build PyTorch: N/A\n\nOS: Ubuntu 22.04.4 LTS (x86_64)\nGCC version: (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\nClang version: Could not collect\nCMake version: version 3.28.3\nLibc version: glibc-2.35\n\nPython version: 3.9.23 | packaged by conda-forge | (main, Jun  4 2025, 17:57:12)  [GCC 13.3.0] (64-bit runtime)\nPython platform: Linux-5.4.0-1140-azure-x86_64-with-glibc2.35\nIs CUDA available: True\nCUDA runtime version: 12.4.99\nCUDA_MODULE_LOADING set to: LAZY\nGPU models and configuration: \nGPU 0: NVIDIA A100-SXM4-80GB\nGPU 1: NVIDIA A100-SXM4-80GB\nGPU 2: NVIDIA A100-SXM4-80GB\nGPU 3: NVIDIA A100-SXM4-80GB\n\nNvidia driver version: 550.127.08\ncuDNN version: Probably one of the following:\n/usr/lib/x86_64-linux-gnu/libcudnn.so.9.0.0\n/usr/lib/x86_64-linux-gnu/libcudnn_adv.so.9.0.0\n/usr/lib/x86_64-linux-gnu/libcudnn_cnn.so.9.0.0\n/usr/lib/x86_64-linux-gnu/libcudnn_engines_precompiled.so.9.0.0\n/usr/lib/x86_64-linux-gnu/libcudnn_engines_runtime_compiled.so.9.0.0\n/usr/lib/x86_64-linux-gnu/libcudnn_graph.so.9.0.0\n/usr/lib/x86_64-linux-gnu/libcudnn_heuristic.so.9.0.0\n/usr/lib/x86_64-linux-gnu/libcudnn_ops.so.9.0.0\nHIP runtime version: N/A\nMIOpen runtime version: N/A\nIs XNNPACK available: True\n\nCPU:\nArchitecture:                       x86_64\nCPU op-mode(s):                     32-bit, 64-bit\nAddress sizes:                      48 bits physical, 48 bits virtual\nByte Order:                         Little Endian\nCPU(s):                             96\nOn-line CPU(s) list:                0-95\nVendor ID:                          AuthenticAMD\nModel name:                         AMD EPYC 7V12 64-Core Processor\nCPU family:                         23\nModel:                              49\nThread(s) per core:                 1\nCore(s) per socket:                 48\nSocket(s):                          2\nStepping:                           0\nBogoMIPS:                           4890.87\nFlags:                              fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx mmxext fxsr_opt pdpe1gb rdtscp lm constant_tsc rep_good nopl tsc_reliable nonstop_tsc cpuid extd_apicid aperfmperf pni pclmulqdq ssse3 fma cx16 sse4_1 sse4_2 movbe popcnt aes xsave avx f16c rdrand hypervisor lahf_lm cmp_legacy cr8_legacy abm sse4a misalignsse 3dnowprefetch osvw topoext perfctr_core ssbd vmmcall fsgsbase bmi1 avx2 smep bmi2 rdseed adx smap clflushopt clwb sha_ni xsaveopt xsavec xgetbv1 clzero xsaveerptr arat umip rdpid\nHypervisor vendor:                  Microsoft\nVirtualization type:                full\nL1d cache:                          3 MiB (96 instances)\nL1i cache:                          3 MiB (96 instances)\nL2 cache:                           48 MiB (96 instances)\nL3 cache:                           384 MiB (24 instances)\nNUMA node(s):                       4\nNUMA node0 CPU(s):                  0-23\nNUMA node1 CPU(s):                  24-47\nNUMA node2 CPU(s):                  48-71\nNUMA node3 CPU(s):                  72-95\nVulnerability Gather data sampling: Not affected\nVulnerability Itlb multihit:        Not affected\nVulnerability L1tf:                 Not affected\nVulnerability Mds:                  Not affected\nVulnerability Meltdown:             Not affected\nVulnerability Mmio stale data:      Not affected\nVulnerability Retbleed:             Vulnerable\nVulnerability Spec store bypass:    Mitigation; Speculative Store Bypass disabled via prctl and seccomp\nVulnerability Spectre v1:           Mitigation; usercopy/swapgs barriers and __user pointer sanitization\nVulnerability Spectre v2:           Mitigation; Retpolines; STIBP disabled; RSB filling; PBRSB-eIBRS Not affected; BHI Not affected\nVulnerability Srbds:                Not affected\nVulnerability Tsx async abort:      Not affected\n\nVersions of relevant libraries:\n[pip3] numpy==2.0.2\n[pip3] nvidia-cublas-cu12==12.8.4.1\n[pip3] nvidia-cuda-cupti-cu12==12.8.90\n[pip3] nvidia-cuda-nvrtc-cu12==12.8.93\n[pip3] nvidia-cuda-runtime-cu12==12.8.90\n[pip3] nvidia-cudnn-cu12==9.10.2.21\n[pip3] nvidia-cufft-cu12==11.3.3.83\n[pip3] nvidia-curand-cu12==10.3.9.90\n[pip3] nvidia-cusolver-cu12==11.7.3.90\n[pip3] nvidia-cusparse-cu12==12.5.8.93\n[pip3] nvidia-cusparselt-cu12==0.7.1\n[pip3] nvidia-nccl-cu12==2.27.3\n[pip3] nvidia-nvjitlink-cu12==12.8.93\n[pip3] nvidia-nvtx-cu12==12.8.90\n[pip3] torch==2.8.0\n[pip3] triton==3.4.0\n[conda] numpy                     2.0.2                    pypi_0    pypi\n[conda] nvidia-cublas-cu12        12.8.4.1                 pypi_0    pypi\n[conda] nvidia-cuda-cupti-cu12    12.8.90                  pypi_0    pypi\n[conda] nvidia-cuda-nvrtc-cu12    12.8.93                  pypi_0    pypi\n[conda] nvidia-cuda-runtime-cu12  12.8.90                  pypi_0    pypi\n[conda] nvidia-cudnn-cu12         9.10.2.21                pypi_0    pypi\n[conda] nvidia-cufft-cu12         11.3.3.83                pypi_0    pypi\n[conda] nvidia-curand-cu12        10.3.9.90                pypi_0    pypi\n[conda] nvidia-cusolver-cu12      11.7.3.90                pypi_0    pypi\n[conda] nvidia-cusparse-cu12      12.5.8.93                pypi_0    pypi\n[conda] nvidia-cusparselt-cu12    0.7.1                    pypi_0    pypi\n[conda] nvidia-nccl-cu12          2.27.3                   pypi_0    pypi\n[conda] nvidia-nvjitlink-cu12     12.8.93                  pypi_0    pypi\n[conda] nvidia-nvtx-cu12          12.8.90                  pypi_0    pypi\n[conda] torch                     2.8.0                    pypi_0    pypi\n[conda] triton                    3.4.0                    pypi_0    pypi",
  "transformers_version": "4.49.0",
  "lm_eval_version": "0.4.9.1",
  "upper_git_hash": null,
  "tokenizer_pad_token": [
    "<|endoftext|>",
    "126081"
  ],
  "tokenizer_eos_token": [
    "<|endoftext|>",
    "126081"
  ],
  "tokenizer_bos_token": [
    "<|startoftext|>",
    "126080"
  ],
  "eot_token_id": null,
  "max_length": 4096,
  "task_hashes": {},
  "model_source": "llada_dist",
  "model_name": "GSAI-ML/LLaDA-8B-Base",
  "model_name_sanitized": "GSAI-ML__LLaDA-8B-Base",
  "system_instruction": null,
  "system_instruction_sha": null,
  "fewshot_as_multiturn": false,
  "chat_template": null,
  "chat_template_sha": null,
  "start_time": 14710160.63081878,
  "end_time": 14738677.045380527,
  "total_evaluation_time_seconds": "28516.414561746642"
}